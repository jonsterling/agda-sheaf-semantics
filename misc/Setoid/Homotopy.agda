module Setoid.Homotopy where

open import Agda.Primitive
import Setoid.Base as S
import Setoid.Path as Path
import Setoid.Product.Boot as ╬а
import Setoid.Terminal as ­ЮЪЎ
import Type as T

record _РЄњРѓЂ_ ..{РёЊРѓђрхњ РёЊРѓђ╩░ РёЊРѓЂрхњ РёЊРѓЂ╩░}
  {A : S.t РёЊРѓђрхњ РёЊРѓђ╩░}
  {B : S.t РёЊРѓЂрхњ РёЊРѓЂ╩░}
  (F G : A ╬а.РЄњРѓђрхЌ B)
    : Set (РёЊРѓђрхњ Ріћ РёЊРѓЂ╩░) where
  constructor nat
  field
    com : Рѕђ {a} Рєњ S.t.hom B (F ╬а.$Рѓђ a T.Рѕљ., G ╬а.$Рѓђ a)
open _РЄњРѓЂ_ public

idn
  : Рѕђ {РёЊРѓђрхњ РёЊРѓђ╩░ РёЊРѓЂрхњ РёЊРѓЂ╩░} {A : S.t РёЊРѓђрхњ РёЊРѓђ╩░} {B : S.t РёЊРѓЂрхњ РёЊРѓЂ╩░}
  Рєњ (F : A ╬а.РЄњРѓђрхЌ B)
  Рєњ T.­ЮЪЎ.t T.╬а.РЄњРѓђ (F РЄњРѓЂ F)
idn {A = A} F = ╬╗ x Рєњ nat (F ╬а.$РѓЂ S.t.idn A x)

cmp
  : Рѕђ {РёЊРѓђрхњ РёЊРѓђ╩░ РёЊРѓЂрхњ РёЊРѓЂ╩░} {A : S.t РёЊРѓђрхњ РёЊРѓђ╩░} {B : S.t РёЊРѓЂрхњ РёЊРѓЂ╩░}
  Рєњ {F G H : A ╬а.РЄњРѓђрхЌ B}
  Рєњ (G РЄњРѓЂ H) T.Рѕљ.├Ќ (F РЄњРѓЂ G)
  Рєњ F РЄњРѓЂ H
cmp {B = B} (╬▓ T.Рѕљ., ╬▒) = record
  { com = S.cmp B (com ╬▓ T.Рѕљ., com ╬▒) }

inv
  : Рѕђ {РёЊРѓђрхњ РёЊРѓђ╩░ РёЊРѓЂрхњ РёЊРѓЂ╩░} {A : S.t РёЊРѓђрхњ РёЊРѓђ╩░} {B : S.t РёЊРѓЂрхњ РёЊРѓЂ╩░}
  Рєњ {F G : A ╬а.РЄњРѓђрхЌ B}
  Рєњ (F РЄњРѓЂ G) T.╬а.РЄњРѓђ (G РЄњРѓЂ F)
inv {B = B} ╬▒ = record
  { com = S.inv B (com ╬▒) }
